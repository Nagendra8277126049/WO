public class IdsProjectHandler {

    private class workOrderOrderItemSKUMap {
        public WorkOrder workOrder { get; set; }
        public Order_Item_Sku_Effort_Map__c orderItemSkuEffortMaps { get; set; }
    }
    public static void HandlePhaseChange(List<pse__Proj__c> oldProjs, List<pse__Proj__c> newProjs) {
        List<WorkOrder> workOrders = new List<WorkOrder>();
        List<workOrderOrderItemSKUMap> workOrderOrderItemSKUMapList = new List<workOrderOrderItemSKUMap>();
        for (pse__Proj__c proj : getPhaseChangedProjects(oldProjs, newProjs)) {            List<Project_Task_SKU_Effort_Mapping_Entry__c> projectTaskSkuEffortMappingEntries = [                    SELECT Id, SKU_Effort_Mapping_Entry__c,SKU_Effort_Mapping_Entry__r.SKU_Effort_Map__c, Project_Task__c, Name, SKU_Quantity__c, Project_Task__r.pse__Estimated_Hours__c,                            Processed__c, Project_Task__r.Project_Site__r.Site__r.Address_1__c, Project_Task__r.Project_Site__r.Site__c,                            Project_Task__r.Project_Site__r.Site__r.Address_2__c,                            Project_Task__r.Project_Site__r.Site__r.City__c, Project_Task__r.Project_Site__r.Site__r.Country__c,                            Project_Task__r.Project_Site__r.Site__r.Postal_Code__c, Project_Task__r.Project_Site__r.Site__r.Region__c,                            Project_Task__r.Project_Site__r.Site__r.State__c, Project_Task__r.Project_Site__r.Site__r.Status__c                    FROM Project_Task_SKU_Effort_Mapping_Entry__c                    WHERE Project_Task__r.pse__Project__c = :proj.Id            ];            if (projectTaskSkuEffortMappingEntries.size() == 0) {                continue;            }            Set<Id> entries = new Set<Id>();            for (Project_Task_SKU_Effort_Mapping_Entry__c entry : projectTaskSkuEffortMappingEntries) {                entries.add(entry.SKU_Effort_Mapping_Entry__c);            }           List<WO_SKU_Effort_Map__c> woSkuEffortMaps = [                    SELECT Id,                           Description__c,                            Calculation_Type__c,                            Duration__c,                            Name,                            SKU_Effort_Mapping_Entry__c,                            Delivery_Method__c,                            Threshold_Value__c,                            Low_Threshold_Duration__c,                            High_Threshold_Duration__c,                            Phase__c,                            Resource_Type__c,                            Schedule_Type__c,                            Auto_Dispatch__c,                            WO_Record_Type__c,                            DPS_Type__r.Name,                            SKU_Effort_Mapping_Entry__r.SKU_Effort_Map__c                    FROM WO_SKU_Effort_Map__c                    WHERE SKU_Effort_Mapping_Entry__c IN :entries                    AND (Phase__r.Name = :proj.pse__Project_Phase__c OR (Phase__c = null AND SKU_Effort_Mapping_Entry__r.Phase__r.Name = :proj.pse__Project_Phase__c))            ];            Set<Id> woSKU = new Set<Id>();            for (WO_SKU_Effort_Map__c wo : woSkuEffortMaps) {                woSKU.add(wo.SKU_Effort_Mapping_Entry__r.SKU_Effort_Map__c);            }            List<Order_Item_Sku_Effort_Map__c> orderItemSkuEffortMaps = [                    SELECT Id,Order_Product__c,Order_Product__r.OrderId, SKU_to_Effort_Mapping__c, Project_Task__c                    FROM Order_Item_Sku_Effort_Map__c                    WHERE SKU_to_Effort_Mapping__c IN :woSKU AND Order_Product__r.Order.Project__c = :proj.Id            ];            if (woSkuEffortMaps.size() == 0) {                continue;            }            Set<Id> workOrderIds = new Set<Id>();            for (WO_SKU_Effort_Map__c wo : woSkuEffortMaps) {                workOrderIds.add(wo.Id);            }            List<Project_Task_WO_Sku_Map__c> projectTaskWOSkuMap = [                    SELECT Id, WO_SKU_Effort_Mapping_Entry__c, Project_Task__c, Processed__c                    FROM Project_Task_WO_Sku_Map__c                    WHERE Project_Task__r.pse__Project__c = :proj.Id                    AND WO_SKU_Effort_Mapping_Entry__c in :workOrderIds           ];            integer projectTaskWoSkuQuantity = projectTaskWOSkuMap.size();            Site__c shippingSite = getFirstShippingSite(proj.Id);            WorkType workType = [SELECT Id FROM WorkType WHERE Name = 'FSE Task'];           for (Project_Task_SKU_Effort_Mapping_Entry__c entry : projectTaskSkuEffortMappingEntries) {                for (WO_SKU_Effort_Map__c woSkuEffortMap : woSkuEffortMaps) {                    Boolean woProcessed = false;                    for (Project_Task_WO_Sku_Map__c wo : projectTaskWOSkuMap) {                        if (wo.WO_SKU_Effort_Mapping_Entry__c == woSkuEffortMap.Id && wo.Project_Task__c == entry.Project_Task__c && wo.Processed__c) {                            woProcessed = true;                            break;                        }                    }                    if (woProcessed) {                        continue;                    }                    if (woSkuEffortMap.SKU_Effort_Mapping_Entry__c == entry.SKU_Effort_Mapping_Entry__c) {WorkOrder workOrder;String woRecordTypeName = String.isBlank(woSkuEffortMap.WO_Record_Type__c) ? 'FF - Unknown' : woSkuEffortMap.WO_Record_Type__c;                        Id woRecordTypeId = Schema.SObjectType.WorkOrder.getRecordTypeInfosByName().get(woRecordTypeName).getRecordTypeId(); for (WorkOrder wo : workOrders) {                            if (wo.Subject == woSkuEffortMap.Description__c && wo.Project_Task__c == entry.Project_Task__c &&                                 wo.RecordTypeId == woRecordTypeId && wo.DPSType__c == woSkuEffortMap.DPS_Type__r.Name) {                                workOrder = wo;                                break;                            }                        }                       if (workOrder == null) {                            workOrder = new WorkOrder(                                    WO_Type__c = 'Install',                                    Subject = woSkuEffortMap.Description__c,                                    Project_Task__c = entry.Project_Task__c,                                    AccountId = proj.pse__Account__c,                                    ContactId = proj.Primary_Contact__c,                                    Delivery_Method__c = woSkuEffortMap.Delivery_Method__c,                                    Status = woRecordTypeName == 'FF - Unknown' ? 'New' : 'FF - New',                                    Resource_Type__c = woSkuEffortMap.Resource_Type__c,                                    Schedule_Type__c = woSkuEffortMap.Schedule_Type__c,                                    Auto_Dispatch__C = woSkuEffortMap.Auto_Dispatch__c,                                    DPSType__c = woSkuEffortMap.DPS_Type__r.Name,                                    RecordTypeId = woRecordTypeId                            );if (woRecordTypeName == 'Installation Badge' && workType != null) {                                workOrder.WorkTypeId = workType.Id;                            } workOrders.add(workOrder);                        }                         else {                            if (String.isNotBlank(workOrder.Delivery_Method__c) && workOrder.Delivery_Method__c == 'Remote' && woSkuEffortMap.Delivery_Method__c == 'OnSite') {                                workOrder.Delivery_Method__c = woSkuEffortMap.Delivery_Method__c;                            }                        }for (Order_Item_Sku_Effort_Map__c orderItem : orderItemSkuEffortMaps) {                            if (orderItem.Project_Task__c == entry.Project_Task__c && entry.SKU_Effort_Mapping_Entry__r.SKU_Effort_Map__c == orderItem.SKU_to_Effort_Mapping__c) {                                workOrderOrderItemSKUMap addworkOrderOrderItemSKUMap = new workOrderOrderItemSKUMap();                                addworkOrderOrderItemSKUMap.workOrder = workOrder;                                addworkOrderOrderItemSKUMap.orderItemSkuEffortMaps = orderItem;                                workOrderOrderItemSKUMapList.add(addworkOrderOrderItemSKUMap);                            }                        }                        projectTaskWOSkuMap.add(new Project_Task_WO_Sku_Map__c(                                WO_SKU_Effort_Mapping_Entry__c = woSkuEffortMap.Id,                                Project_Task__c = entry.Project_Task__c,                                Processed__c = true                        ));                        if (woSkuEffortMap.Calculation_Type__c == 'By SKU Quantity') {                            if (workOrder.Duration != null) {                                workOrder.Duration = workOrder.Duration + (woSkuEffortMap.Duration__c * entry.SKU_Quantity__c);                            } else {                                workOrder.Duration = woSkuEffortMap.Duration__c * entry.SKU_Quantity__c;                            }                        } else if (woSkuEffortMap.Calculation_Type__c == 'By Threshold') {                            if (entry.Project_Task__r.pse__Estimated_Hours__c != null) {                                Decimal duration;                                if (entry.Project_Task__r.pse__Estimated_Hours__c <= woSkuEffortMap.Threshold_Value__c) {                                    duration = woSkuEffortMap.Low_Threshold_Duration__c;                                } else {                                    duration = woSkuEffortMap.High_Threshold_Duration__c;                                }                                if (workOrder.Duration != null) {                                    workOrder.Duration = workOrder.Duration + duration;                                } else {                                    workOrder.Duration = duration;                                }                            }                        }                        if (entry.Project_Task__r.Project_Site__r.Site__c != null) {                            Site__c projectTaskAddress = entry.Project_Task__r.Project_Site__r.Site__r;                            workOrder.City = projectTaskAddress.City__c;                            workOrder.Country = projectTaskAddress.Country__c;                            workOrder.PostalCode = projectTaskAddress.Postal_Code__c;                            workOrder.State = projectTaskAddress.State__c;                            workOrder.Street = projectTaskAddress.Address_1__c;                            if (String.isNotBlank(projectTaskAddress.Address_2__c)) {                                workOrder.Street = workOrder.Street + ' ' + projectTaskAddress.Address_2__c;                            }                        } else if (shippingSite != null) {                            workOrder.City = shippingSite.City__c;                            workOrder.Country = shippingSite.Country__c;                            workOrder.PostalCode = shippingSite.Postal_Code__c;                            workOrder.State = shippingSite.State__c;                            workOrder.Street = shippingSite.Address_1__c;                            if (String.isNotBlank(shippingSite.Address_2__c)) {                                workOrder.Street = workOrder.Street + ' ' + shippingSite.Address_2__c;                            }                        }                    }                }                entry.Processed__c = true;            }            if (projectTaskWoSkuQuantity != projectTaskWOSkuMap.size()) {                upsert(projectTaskWOSkuMap);           }            if (projectTaskSkuEffortMappingEntries.size() > 0) {                update(projectTaskSkuEffortMappingEntries);            }
        }

        if (workOrders.size() > 0) {           insert(workOrders);            List<Work_Order_Relationship__c> workOrderRelationshipList = new List<Work_Order_Relationship__c>();            for (workOrderOrderItemSKUMap wO : workOrderOrderItemSKUMapList) {                Work_Order_Relationship__c workOrderRelationship = new Work_Order_Relationship__c();                workOrderRelationship.Work_Order__c = wO.WorkOrder.Id;                workOrderRelationship.Order_Product__c = wO.orderItemSkuEffortMaps.Order_Product__c;                workOrderRelationship.Order__c = wO.orderItemSkuEffortMaps.Order_Product__r.OrderId;                workOrderRelationshipList.add(workOrderRelationship);            }            insert workOrderRelationshipList;            List<Work_Order_Skill__c> workOrderSkills = createWorkOrderSkillsList(workOrders);            if (workOrderSkills.size() > 0) {                insert(workOrderSkills);            }
        }
    }

    private static List<pse__Proj__c> getPhaseChangedProjects(List<pse__Proj__c> oldProjs, List<pse__Proj__c> newProjs) {
        List<pse__Proj__c> projs = new List<pse__Proj__c>();

        for (pse__Proj__c oldProj : oldProjs) {
            for (pse__Proj__c newProj : newProjs) {
                if (oldProj.Id == newProj.Id && validatePhaseChange(oldProj.pse__Project_Phase__c, newProj.pse__Project_Phase__c)) {                    projs.add(newProj);
                }
            }
        }

        return projs;
    }

    private static Boolean validatePhaseChange(String oldPhase, String newPhase) {
        if (oldPhase != newPhase) {
            if ((oldPhase == 'Setup' && newPhase == 'Initiate') ||
                    (oldPhase == 'Initiate' && newPhase == 'Plan') ||
                    (oldPhase == 'Plan' && newPhase == 'Execute') ||
                    (oldPhase == 'Execute' && newPhase == 'Close')) {                return true;            } else {
                return false;           }        } else {            return false;        }    }    private static Site__c getFirstShippingSite(Id projectId) {        List<Project_Site__c> site = [                SELECT Site__r.Address_1__c,                        Site__r.Address_2__c,                        Site__r.City__c,                        Site__r.Country__c,                        Site__r.Postal_Code__c,                        Site__r.Region__c,                        Site__r.State__c,                        Site__r.Status__c                FROM Project_Site__c                WHERE Project__c = :projectId                AND Address_Type__c = 'Shipping'                AND Site__c != null                AND Site__r.Status__c = 'Active'                ORDER BY CreatedDate DESC        ];        if (site != null && site.size() > 0) {            return site[0].Site__r;        } else {            return null;        }    }    private static List<Work_Order_Skill__c> createWorkOrderSkillsList(List<WorkOrder> workOrders) {        Set<Id> tasks = new Set<Id>();        for (WorkOrder wo : workOrders) {            tasks.add(wo.Project_Task__c);        }        List<Project_Task_Skill__c> projectTaskSkills = [                SELECT Id,                        Project_Task__c,                        Skill_Certification__c                FROM Project_Task_Skill__c                WHERE Project_Task__c IN :tasks        ];        List<Work_Order_Skill__c> workOrderSkills = new List<Work_Order_Skill__c>();        if (projectTaskSkills != null && projectTaskSkills.size() > 0) {            for (WorkOrder wo : workOrders) {                for (Project_Task_Skill__c skill : projectTaskSkills) {                    if (wo.Project_Task__c == skill.Project_Task__c) {                        Work_Order_Skill__c workOrderSkill = new Work_Order_Skill__c(                                Skill_Certification__c = skill.Skill_Certification__c,                                Work_Order__c = wo.Id                        );                        workOrderSkills.add(workOrderSkill);                    }                }            }        }        return workOrderSkills;
    }

    public static void handleStageChange(List<pse__Proj__c> oldProjs, List<pse__Proj__c> newProjs) {
        updateMilestonesOfProjectsChangedToCanceled(oldProjs,newProjs);
    }
    
    private static void updateMilestonesOfProjectsChangedToCanceled(List<pse__Proj__c> oldProjs, List<pse__Proj__c> newProjs) {
        List<pse__Proj__c> projectsChangedCanceled = getStageChangedProjectsToCanceled(oldProjs, newProjs);
        
        //only if exists projects changed to Canceled
        if(projectsChangedCanceled != null && !projectsChangedCanceled.isEmpty()){
        	List<pse__Milestone__c> milestones = [SELECT Id, Name, pse__Status__c FROM pse__Milestone__c
                      	WHERE pse__Project__c in : projectsChangedCanceled
                        AND pse__Status__c NOT IN ('Approved','Canceled')
            ];
            
            if(milestones != null && !milestones.isEmpty()){
                for(pse__Milestone__c milestone : milestones){
                    milestone.pse__Status__c = 'Canceled';
                } 
                
                update milestones;
            }
        }
    }
    
    //verify changed projects to Stage 'Cancelled'
    private static List<pse__Proj__c> getStageChangedProjectsToCanceled(List<pse__Proj__c> oldProjs, List<pse__Proj__c> newProjs) {
        List<pse__Proj__c> projs = new List<pse__Proj__c>();
        for (pse__Proj__c oldProj : oldProjs) {
            for (pse__Proj__c newProj : newProjs) {
                if (oldProj.Id == newProj.Id && validateStageChangeToCanceled(oldProj.pse__Stage__c, newProj.pse__Stage__c)) {
                    projs.add(newProj); 
                }
            }
        }
        return projs;
    }
    
    private static Boolean validateStageChangeToCanceled(String oldStage, String newStage) {
        if (newStage != null && newStage != oldStage && newStage.equalsIgnoreCase('Cancelled')) {
        	return true;
        }
        return false;
    }

}